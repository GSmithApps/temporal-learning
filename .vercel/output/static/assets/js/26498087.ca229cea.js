"use strict";(self.webpackChunktemporal_learning=self.webpackChunktemporal_learning||[]).push([[9994],{5997:(e,t,n)=>{n.d(t,{Zt:()=>l,yT:()=>o});var a=n(7294),r=n(2004);const o=function(e){let{url:t,loop:n,playing:o}=e;return a.createElement("div",{className:"relative rounded-lg shadow-lg",style:{position:"relative",paddingTop:"56.25%",marginBottom:20}},a.createElement(r.Z,{url:t,loop:n,playing:o,width:"100%",height:"100%",controls:!0,style:{position:"absolute",top:0,left:0}}))};n(4673);var i=n(3612);function l(){return a.createElement(i.Z,{type:"info",title:"WORK IN PROGRESS"},a.createElement("p",null,"This tutorial is a work in progress. Some sections may be incomplete, out of date, or missing. We're working to update it."))}},2597:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var a=n(3117),r=(n(7294),n(3905)),o=(n(5162),n(4866),n(5997));const i={title:"Build an eCommerce App With Temporal and Go, Part 1: Getting Started",sidebar_position:1,tags:["go","tutorial"],keywords:["go","golang","temporal","sdk","tutorial","workflows","ecommerce"],slug:"build-an-ecommerce-app-with-temporal-part-1",last_update:{date:new Date("2021-05-18T00:00:00.000Z"),author:"Valeri Karpov"},image:"/img/temporal-logo-twitter-card.png"},l=void 0,s={unversionedId:"tutorials/go/ecommerce/part1",id:"tutorials/go/ecommerce/part1",title:"Build an eCommerce App With Temporal and Go, Part 1: Getting Started",description:"Temporal Go SDK",source:"@site/docs/tutorials/go/ecommerce/part1.md",sourceDirName:"tutorials/go/ecommerce",slug:"/tutorials/go/ecommerce/build-an-ecommerce-app-with-temporal-part-1",permalink:"/tutorials/go/ecommerce/build-an-ecommerce-app-with-temporal-part-1",draft:!1,tags:[{label:"go",permalink:"/tags/go"},{label:"tutorial",permalink:"/tags/tutorial"}],version:"current",lastUpdatedBy:"Valeri Karpov",lastUpdatedAt:1621296e3,formattedLastUpdatedAt:"May 18, 2021",sidebarPosition:1,frontMatter:{title:"Build an eCommerce App With Temporal and Go, Part 1: Getting Started",sidebar_position:1,tags:["go","tutorial"],keywords:["go","golang","temporal","sdk","tutorial","workflows","ecommerce"],slug:"build-an-ecommerce-app-with-temporal-part-1",last_update:{date:"2021-05-18T00:00:00.000Z",author:"Valeri Karpov"},image:"/img/temporal-logo-twitter-card.png"},sidebar:"tutorialSidebar",previous:{title:"Build an eCommerce App With Temporal and Go",permalink:"/tutorials/go/ecommerce/"},next:{title:"Building an eCommerce web app with Temporal and Go, Part 2: Reminder Emails",permalink:"/tutorials/go/ecommerce/build-an-ecommerce-app-with-temporal-part-2-reminder-emails"}},p={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Shopping cart Workflow",id:"shopping-cart-workflow",level:2},{value:"Adding and removing elements from the cart",id:"adding-and-removing-elements-from-the-cart",level:2},{value:"Conclusion",id:"conclusion",level:2}],c={toc:m};function u(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Temporal Go SDK",src:n(161).Z,width:"902",height:"254"})),(0,r.kt)(o.Zt,{mdxType:"OutdatedNotice"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Temporal promises to help you build invincible apps.\nTo make this possible, new design patterns are introduced that are very different from the ones used in a traditional web app architecture."),(0,r.kt)("p",null,"Instead of letting your API endpoints talk to a database over the network, they would instead call in-memory ",(0,r.kt)("em",{parentName:"p"},"Workflows")," that store state internally.\nTemporal handles persisting the state of your Workflows and distributes your Workflow between Workers as necessary.\nYou, as the developer are responsible for implementing ",(0,r.kt)("a",{parentName:"p",href:"https://docs.temporal.io/dev-guide/go/foundations#develop-workflows"},"Workflows")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.temporal.io/dev-guide/go/foundations#activity-definition"},"Activities")," as normal Go code.\nMeanwhile, Temporal handles the data persistence and horizontal scaling for you."),(0,r.kt)("p",null,"In this blog post, I'll demonstrate how to build a shopping cart using long-living Workflows.\nYou can find the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/temporalio/temporal-ecommerce"},"full source code for this shopping cart on GitHub"),"."),(0,r.kt)("h2",{id:"shopping-cart-workflow"},"Shopping cart Workflow"),(0,r.kt)("p",null,"In a traditional web app architecture, a user's shopping cart is stored as a row or document in a database.\nWhile you can store shopping carts in a separate database using Temporal, you have another option: you can represent a shopping cart as a long-living Workflow."),(0,r.kt)("p",null,"A Workflow is a Go function that takes 2 parameters: a Temporal Workflow context ",(0,r.kt)("inlineCode",{parentName:"p"},"ctx")," and an arbitrary ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),".\nIt can run for an arbitrarily long period of time, as Temporal can handle pausing and restarting the Workflow.\nLastly, it is able to share its state via ",(0,r.kt)("em",{parentName:"p"},"queries")," and modify its state in response to ",(0,r.kt)("em",{parentName:"p"},"signals"),"."),(0,r.kt)("p",null,"The following is a simplified shopping cart that adds a new product to the cart every time it receives an ",(0,r.kt)("inlineCode",{parentName:"p"},"updateCart")," signal."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package app\n\nimport (\n    "go.temporal.io/sdk/workflow"\n)\n\ntype (\n    CartItem struct {\n        ProductId int\n        Quantity  int\n    }\n\n    CartState struct {\n        Items []CartItem\n        Email string\n    }\n)\n\nfunc CartWorkflowExample(ctx workflow.Context, state CartState) error {\n    logger := workflow.GetLogger(ctx)\n\n    err := workflow.SetQueryHandler(ctx, "getCart", func(input []byte) (CartState, error) {\n        return state, nil\n    })\n    if err != nil {\n        logger.Info("SetQueryHandler failed.", "Error", err)\n        return err\n    }\n\n    channel := workflow.GetSignalChannel(ctx, "cartMessages")\n    selector := workflow.NewSelector(ctx)\n\n    selector.AddReceive(channel, func(c workflow.ReceiveChannel, _ bool) {\n        var signal interface{}\n        c.Receive(ctx, &signal)\n        state.Items = append(state.Items, CartItem{ProductId: 0, Quantity: 1})\n    })\n\n    for {\n        // Can also use `Receive()` instead of a selector, but we\'ll be making further\n        // use of selectors in part 2 of this series.\n        selector.Select(ctx)\n    }\n\n    return nil\n}\n')),(0,r.kt)("p",null,"To run a Workflow, you need to create a Worker process.\nA Temporal ",(0,r.kt)("em",{parentName:"p"},"Worker")," listens for events on a queue and has a list of registered Workflows that it can run in response to messages on the queue.\nBelow is the largely-boilerplate ",(0,r.kt)("inlineCode",{parentName:"p"},"worker/main.go")," file:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/temporalio/temporal-ecommerce/blob/main/worker/main.go"},"worker/main.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "log"\n    "go.temporal.io/sdk/client"\n    "go.temporal.io/sdk/worker"\n    "os"\n    "temporal-ecommerce/app"\n)\n\nvar (\n    stripeKey     = os.Getenv("STRIPE_PRIVATE_KEY")\n    mailgunDomain = os.Getenv("MAILGUN_DOMAIN")\n    mailgunKey    = os.Getenv("MAILGUN_PRIVATE_KEY")\n)\n\nfunc main() {\n    // Create the client object just once per process\n    c, err := client.NewClient(client.Options{})\n    if err != nil {\n        log.Fatalln("unable to create Temporal client", err)\n    }\n    defer c.Close()\n    // This worker hosts both Worker and Activity functions\n    w := worker.New(c, "CART_TASK_QUEUE", worker.Options{})\n\n    if stripeKey == "" {\n        log.Fatalln("Must set STRIPE_PRIVATE_KEY environment variable")\n    }\n    if mailgunDomain == "" {\n        log.Fatalln("Must set MAILGUN_DOMAIN environment variable")\n    }\n    if mailgunKey == "" {\n        log.Fatalln("Must set MAILGUN_PRIVATE_KEY environment variable")\n    }\n\n    a := &app.Activities{\n        StripeKey: stripeKey,\n        MailgunDomain: mailgunDomain,\n        MailgunKey: mailgunKey,\n    }\n\n    w.RegisterActivity(a.CreateStripeCharge)\n    w.RegisterActivity(a.SendAbandonedCartEmail)\n\n    w.RegisterWorkflow(app.CartWorkflow)\n    // Start listening to the Task Queue\n    err = w.Run(worker.InterruptCh())\n    if err != nil {\n        log.Fatalln("unable to start Worker", err)\n    }\n}\n')),(0,r.kt)("p",null,"In order to see this shopping cart Workflow in action, you can create a ",(0,r.kt)("em",{parentName:"p"},"starter")," that sends queries and signals to modify the shopping cart."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/temporalio/temporal-ecommerce/blob/main/start/main.go"},"start/main.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "time"\n\n    "temporal-ecommerce/app"\n\n    "go.temporal.io/sdk/client"\n)\n\nfunc main() {\n    c, err := client.NewClient(client.Options{})\n    if err != nil {\n        log.Fatalln("unable to create Temporal client", err)\n    }\n    defer c.Close()\n\n    workflowID := "CART-" + fmt.Sprintf("%d", time.Now().Unix())\n\n    options := client.StartWorkflowOptions{\n        ID:        workflowID,\n        TaskQueue: "CART_TASK_QUEUE",\n    }\n\n    state := app.CartState{Items: make([]app.CartItem, 0)}\n    we, err := c.ExecuteWorkflow(context.Background(), options, app.CartWorkflow, state)\n    if err != nil {\n        log.Fatalln("unable to execute workflow", err)\n    }\n\n    update := app.AddToCartSignal{Route: app.RouteTypes.ADD_TO_CART, Item: app.CartItem{ProductId:0, Quantity: 1}}\n    err = c.SignalWorkflow(context.Background(), workflowID, "", "ADD_TO_CART_CHANNEL", update)\n\n    resp, err := c.QueryWorkflow(context.Background(), workflowID, "", "getCart")\n    if err != nil {\n        log.Fatalln("Unable to query workflow", err)\n    }\n    var result interface{}\n    if err := resp.Get(&result); err != nil {\n        log.Fatalln("Unable to decode query result", err)\n    }\n    // Prints a message similar to:\n    // 2021/03/31 15:43:54 Received query result Result map[Email: Items:[map[ProductId:0 Quantity:1]]]\n    log.Println("Received query result", "Result", result)\n}\n')),(0,r.kt)("h2",{id:"adding-and-removing-elements-from-the-cart"},"Adding and removing elements from the cart"),(0,r.kt)("p",null,"In order to support adding and removing elements from the cart, the Workflow needs to respond to different types of signals.\nSignals are a way to notify Workflows of external events.\nThe following code listens to a Signal channel for messages that either add or remove items from a shopping cart."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'channel := workflow.GetSignalChannel(ctx, "cartMessages")\nselector := workflow.NewSelector(ctx)\n\nselector.AddReceive(channel, func(c workflow.ReceiveChannel, _ bool) {\n    var signal interface{}\n    c.Receive(ctx, &signal)\n\n    var routeSignal RouteSignal\n    err := mapstructure.Decode(signal, &routeSignal)\n    if err != nil {\n        logger.Error("Invalid signal type %v", err)\n        return\n    }\n\n    switch {\n    case routeSignal.Route == RouteTypes.ADD_TO_CART:\n        var message AddToCartSignal\n        err := mapstructure.Decode(signal, &message)\n        if err != nil {\n            logger.Error("Invalid signal type %v", err)\n            return\n        }\n\n        AddToCart(&state, message.Item)\n    case routeSignal.Route == RouteTypes.REMOVE_FROM_CART:\n        var message RemoveFromCartSignal\n        err := mapstructure.Decode(signal, &message)\n        if err != nil {\n            logger.Error("Invalid signal type %v", err)\n            return\n        }\n\n        RemoveFromCart(&state, message.Item)\n})\n\nfor {\n    selector.Select(ctx)\n}\n')),(0,r.kt)("p",null,"All the ",(0,r.kt)("inlineCode",{parentName:"p"},"AddToCart()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RemoveFromCart()")," functions need to do is modify the ",(0,r.kt)("inlineCode",{parentName:"p"},"state.Items")," array."),(0,r.kt)("p",null,"Temporal is responsible for persisting and distributing ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/temporalio/temporal-ecommerce/blob/main/workflow.go"},"workflow.go")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (state *CartState) AddToCart(item CartItem) {\n    for i := range state.Items {\n        if state.Items[i].ProductId != item.ProductId {\n            continue\n        }\n\n        state.Items[i].Quantity += item.Quantity\n        return\n    }\n\n    state.Items = append(state.Items, item)\n}\n\nfunc (state *CartState) RemoveFromCart(item CartItem) {\n    for i := range state.Items {\n        if state.Items[i].ProductId != item.ProductId {\n            continue\n        }\n\n        state.Items[i].Quantity -= item.Quantity\n        if state.Items[i].Quantity <= 0 {\n            state.Items = append(state.Items[:i], state.Items[i+1:]...)\n        }\n        break\n    }\n}\n\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Temporal introduces a new way of building web applications; instead of storing a shopping cart in a database, you can represent a shopping cart as a long-living Workflow.\nFor simple CRUD applications like this shopping cart app, this pattern doesn't really make things significantly easier."),(0,r.kt)("p",null,"In the ",(0,r.kt)("a",{parentName:"p",href:"/tutorials/go/ecommerce/build-an-ecommerce-app-with-temporal-part-2-reminder-emails"},"next tutorial"),", you'll look at a case where Temporal's long-running Workflows shine: sending a reminder email if the user abandons their cart."))}u.isMDXComponent=!0},161:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/banner_go-9b8733250036c66a86bf103fb4a01804.png"}}]);