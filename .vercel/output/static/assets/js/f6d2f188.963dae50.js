"use strict";(self.webpackChunktemporal_learning=self.webpackChunktemporal_learning||[]).push([[7298],{5997:(e,t,n)=>{n.d(t,{Zt:()=>l,yT:()=>i});var a=n(7294),o=n(2004);const i=function(e){let{url:t,loop:n,playing:i}=e;return a.createElement("div",{className:"relative rounded-lg shadow-lg",style:{position:"relative",paddingTop:"56.25%",marginBottom:20}},a.createElement(o.Z,{url:t,loop:n,playing:i,width:"100%",height:"100%",controls:!0,style:{position:"absolute",top:0,left:0}}))};n(4673);var r=n(3612);function l(){return a.createElement(r.Z,{type:"info",title:"WORK IN PROGRESS"},a.createElement("p",null,"This tutorial is a work in progress. Some sections may be incomplete, out of date, or missing. We're working to update it."))}},4217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var a=n(3117),o=(n(7294),n(3905)),i=(n(5162),n(4866),n(5997));const r={id:"hello-world-php",sidebar_position:1,keywords:["PHP","temporal","sdk","tutorial"],tags:["PHP","SDK"],last_update:{date:new Date("2021-10-01T00:00:00.000Z")},title:"Run a Temporal Application in PHP",description:"Explore the components that make up a Temporal project in PHP.",image:"/img/temporal-logo-twitter-card.png"},l=void 0,p={unversionedId:"getting_started/php/hello_world_in_php/hello-world-php",id:"getting_started/php/hello_world_in_php/hello-world-php",title:"Run a Temporal Application in PHP",description:"Explore the components that make up a Temporal project in PHP.",source:"@site/docs/getting_started/php/hello_world_in_php/index.md",sourceDirName:"getting_started/php/hello_world_in_php",slug:"/getting_started/php/hello_world_in_php/",permalink:"/getting_started/php/hello_world_in_php/",draft:!1,tags:[{label:"PHP",permalink:"/tags/php"},{label:"SDK",permalink:"/tags/sdk"}],version:"current",lastUpdatedAt:1633046400,formattedLastUpdatedAt:"Oct 1, 2021",sidebarPosition:1,frontMatter:{id:"hello-world-php",sidebar_position:1,keywords:["PHP","temporal","sdk","tutorial"],tags:["PHP","SDK"],last_update:{date:"2021-10-01T00:00:00.000Z"},title:"Run a Temporal Application in PHP",description:"Explore the components that make up a Temporal project in PHP.",image:"/img/temporal-logo-twitter-card.png"},sidebar:"tutorialSidebar",previous:{title:"Set up a local development environment for Temporal and PHP",permalink:"/getting_started/php/dev_environment/"},next:{title:"Courses",permalink:"/courses/"}},s={},c=[{value:"Downloading the project",id:"downloading-the-project",level:2},{value:"Run the application",id:"run-the-application",level:2},{value:"The Workflow Client",id:"the-workflow-client",level:2},{value:"Workflow interface and implementation",id:"workflow-interface-and-implementation",level:2},{value:"Activity interface and implementation",id:"activity-interface-and-implementation",level:3},{value:"Roadrunner and Temporal Worker",id:"roadrunner-and-temporal-worker",level:3},{value:"Conclusion",id:"conclusion",level:2}],m={toc:c};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Temporal PHP SDK",src:n(766).Z,width:"902",height:"254"})),(0,o.kt)(i.Zt,{mdxType:"OutdatedNotice"}),(0,o.kt)("p",null,"In this tutorial, you'll explore the different components that make up a Temporal project using the PHP SDK, including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Temporal Client"),(0,o.kt)("li",{parentName:"ul"},"Workflow and Activity Code"),(0,o.kt)("li",{parentName:"ul"},"Temporal Worker (running with ",(0,o.kt)("a",{parentName:"li",href:"https://roadrunner.dev"},"RoadRunner"),")")),(0,o.kt)("p",null,"All the code on this page is included in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php/tree/master/app/src/SimpleActivity"},"SimpleActivity")," sample,\nfrom our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php"},"Samples repository"),"."),(0,o.kt)("h2",{id:"downloading-the-project"},"Downloading the project"),(0,o.kt)("p",null,"Clone the project repository and navigate to the project directory:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-command"},"git clone git@github.com:temporalio/samples-php.git\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-command"},"cd samples-php\n")),(0,o.kt)("p",null,"Start the Temporal Server and application containers:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-command"},"docker-compose up\n")),(0,o.kt)("p",null,"This starts Temporal Server with the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php/blob/master/docker-compose.yml"},"docker-compose.yml")," that ships with the ",(0,o.kt)("inlineCode",{parentName:"p"},"samples-php")," repository.\nWhen it's live, you can access ",(0,o.kt)("a",{parentName:"p",href:"https://docs.temporal.io/web-ui"},"Temporal Web")," at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:8080")," although you won't see any Workflows run yet."),(0,o.kt)("h2",{id:"run-the-application"},"Run the application"),(0,o.kt)("p",null,"The program you'll run is a console command that starts a workflow, prints its IDs, and then waits for its result."),(0,o.kt)("p",null,"Execute the following command to run the program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-command"},"docker-compose exec app php app.php simple-activity\n")),(0,o.kt)("p",null,"This prints the Workflow ID (and corresponding Run ID) that is started, and you'll see it reflected in the Temporal Web UI."),(0,o.kt)("p",null,"At the end it will log the result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"Starting GreetingWorkflow...\nStarted: WorkflowID=3520711c-7c8b-4d36-bd18-68328e60447b\nResult:\nHello Antony\n")),(0,o.kt)("p",null,"Let's explore each piece of the code and how it works with Temporal."),(0,o.kt)("h2",{id:"the-workflow-client"},"The Workflow Client"),(0,o.kt)("p",null,"In the following snippet,  ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkflowClientInterface")," is the entry point to get access to workflows. When you need to create, retrieve, or start a workflow you'll use an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkflowClientInterface"),"."),(0,o.kt)("p",null,"Here we create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"GreetingWorkflowInterface")," with execution timeout of 1 minute. Then we print some information and start the workflow."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php/blob/main/app/src/SimpleActivity/ExecuteCommand.php"},"app/src/SimpleActivity/ExecuteCommand.php")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"class ExecuteCommand extends Command\n{\n    protected const NAME = 'simple-activity';\n    protected const DESCRIPTION = 'Execute SimpleActivity\\GreetingWorkflow';\n\n    public function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $workflow = $this->workflowClient->newWorkflowStub(\n            GreetingWorkflowInterface::class,\n            WorkflowOptions::new()->withWorkflowExecutionTimeout(CarbonInterval::minute())\n        );\n\n        $output->writeln(\"Starting <comment>GreetingWorkflow</comment>... \");\n\n        // Start a workflow execution. Usually this is done from another program.\n        // Uses task queue from the GreetingWorkflow @WorkflowMethod annotation.\n        $run = $this->workflowClient->start($workflow, 'Antony');\n\n        $output->writeln(\n            sprintf(\n                'Started: WorkflowID=<fg=magenta>%s</fg=magenta>',\n                $run->getExecution()->getID(),\n            )\n        );\n\n        // getResult waits for workflow to complete\n        $output->writeln(sprintf(\"Result:\\n<info>%s</info>\", $run->getResult()));\n\n        return self::SUCCESS;\n    }\n}\n")),(0,o.kt)("p",null,"Now let's look at the workflow."),(0,o.kt)("h2",{id:"workflow-interface-and-implementation"},"Workflow interface and implementation"),(0,o.kt)("p",null,"With the PHP SDK, you define an interface and an implementation."),(0,o.kt)("p",null,"First, let's take a look at the workflow interface:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php/blob/main/app/src/SimpleActivity/GreetingWorkflowInterface.php"},"app/src/SimpleActivity/GreetingWorkflowInterface.php")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'use Temporal\\Workflow\\WorkflowInterface;\nuse Temporal\\Workflow\\WorkflowMethod;\n\n#[WorkflowInterface]\ninterface GreetingWorkflowInterface\n{\n    /**\n     * @param string $name\n     * @return string\n     */\n    #[WorkflowMethod(name: "SimpleActivity.greet")]\n    public function greet(\n        string $name\n    );\n}\n')),(0,o.kt)("p",null,"The important thing here are attributes ",(0,o.kt)("inlineCode",{parentName:"p"},"#[WorkflowInterface]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"#[WorkflowMethod]"),'.  Both of them define the "workflow".\nThe first one marks the class/interface, the second one marks the method in the class/interface.'),(0,o.kt)("p",null,"In our case the workflow is the method that accepts string ",(0,o.kt)("inlineCode",{parentName:"p"},"$name"),".  To see what it actually does, look at the implementation in the class ",(0,o.kt)("inlineCode",{parentName:"p"},"GreetingWorkflow"),":"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php/blob/main/app/src/SimpleActivity/GreetingWorkflow.php"},"app/src/SimpleActivity/GreetingWorkflow.php")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"class GreetingWorkflow implements GreetingWorkflowInterface\n{\n    private $greetingActivity;\n\n    public function __construct()\n    {\n        /**\n         * Activity stub implements activity interface and proxies calls to it to Temporal activity\n         * invocations. Because activities are reentrant, only a single stub can be used for multiple\n         * activity invocations.\n         */\n        $this->greetingActivity = Workflow::newActivityStub(\n            GreetingActivityInterface::class,\n            ActivityOptions::new()->withStartToCloseTimeout(CarbonInterval::seconds(2))\n        );\n    }\n\n    public function greet(string $name): \\Generator\n    {\n        // This is a blocking call that returns only after the activity has completed.\n        return yield $this->greetingActivity->composeGreeting('Hello', $name);\n    }\n}\n")),(0,o.kt)("p",null,"This is the implementation of our workflow.  It communicates with one activity and delegates all the work to it."),(0,o.kt)("p",null,"In the constructor we create an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"GreetingActivityInterface")," with maximum execution time of 2 seconds."),(0,o.kt)("p",null,"In method ",(0,o.kt)("inlineCode",{parentName:"p"},"greet()")," we call our activity."),(0,o.kt)("p",null,"Here the workflow pauses and waits until the activity is done and only then returns the result."),(0,o.kt)("p",null,"It is achieved with a call to ",(0,o.kt)("inlineCode",{parentName:"p"},"yield"),"."),(0,o.kt)("p",null,"To instantiate an instance of the activity we use a static helper ",(0,o.kt)("inlineCode",{parentName:"p"},"Workflow::newActivityStub()"),"."),(0,o.kt)("h3",{id:"activity-interface-and-implementation"},"Activity interface and implementation"),(0,o.kt)("p",null,"And at last we arrive at the activity code. Consider it as a particular task in the business logic. As you have noticed we again use an interface to instantiate an object:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php/blob/main/app/src/SimpleActivity/GreetingActivityInterface.php"},"app/src/SimpleActivity/GreetingActivityInterface.php")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use Temporal\\Activity\\ActivityInterface;\nuse Temporal\\Activity\\ActivityMethod;\n\n#[ActivityInterface(prefix: 'SimpleActivity.')]\ninterface GreetingActivityInterface\n{\n    #[ActivityMethod(name: \"ComposeGreeting\")]\n    public function composeGreeting(\n        string $greeting,\n        string $name\n    ): string;\n}\n")),(0,o.kt)("p",null,"Activities and workflow classes in PHP are marked with special attributes.\nFor activity, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"#[ActivityInterface]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"#[ActivityMethod]"),".\nThe first on marks this class/interface as an activity, the second one marks the activity method.\nOur activity consists of one method, which accepts two string arguments.\nThe implementation of this interface is a very straight forward - just compose a new string of provided arguments:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/temporalio/samples-php/blob/main/app/src/SimpleActivity/GreetingActivity.php"},"app/src/SimpleActivity/GreetingActivity.php")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"class GreetingActivity implements GreetingActivityInterface\n{\n    public function composeGreeting(string $greeting, string $name): string\n    {\n        return $greeting . ' ' . $name;\n    }\n}\n")),(0,o.kt)("p",null,"Both workflow and activity code in our example have both interface and implementation.\nBut we could skip interfaces and just mark classes with corresponding attributes and everything will continue working.\nBut how does the workflow client know about interface implementations?\nHow does Temporal know what PHP class should be executed?"),(0,o.kt)("h3",{id:"roadrunner-and-temporal-worker"},"Roadrunner and Temporal Worker"),(0,o.kt)("p",null,"To answer this question we need to take a look at how an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"WorkflowClientInterface")," is created.\nThis is the part where ",(0,o.kt)("a",{parentName:"p",href:"https://roadrunner.dev"},"RoadRunner")," comes into a play."),(0,o.kt)("p",null,"In our example under the hood RoadRunner executes ",(0,o.kt)("inlineCode",{parentName:"p"},"worker.php")," script:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"declare(strict_types=1);\n\nuse Temporal\\SampleUtils\\DeclarationLocator;\nuse Temporal\\WorkerFactory;\n\nini_set('display_errors', 'stderr');\ninclude \"vendor/autoload.php\";\n\n// finds all available workflows, activity types and commands in a given directory\n$declarations = DeclarationLocator::create(__DIR__ . '/src/');\n\n// factory initiates and runs task queue specific activity and workflow workers\n$factory = WorkerFactory::create();\n\n// Worker that listens on a task queue and hosts both workflow and activity implementations.\n$worker = $factory->newWorker();\n\nforeach ($declarations->getWorkflowTypes() as $workflowType) {\n    // Workflows are stateful. So you need a type to create instances.\n    $worker->registerWorkflowTypes($workflowType);\n}\n\nforeach ($declarations->getActivityTypes() as $activityType) {\n    // Activities are stateless and thread safe. So a shared instance is used.\n    $worker->registerActivity($activityType);\n}\n\n// start primary loop\n$factory->run();\n")),(0,o.kt)("p",null,"You may consider this script as a bridge between your PHP application and Temporal.  Temporal needs to know about our activity and workflow implementations. Thus, they need to be registered within the worker with ",(0,o.kt)("inlineCode",{parentName:"p"},"registerWorkflowTypes()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"registerActivity()"),".  The first one registers workflows and accepts a list of classes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$worker->registerWorkflowTypes(HelloWorldWorkflow::class);\n")),(0,o.kt)("p",null,"The second one registers activities and accepts a list of activity classes, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$worker->registerActivity(MyActivity::class);\n")),(0,o.kt)("p",null,"On the last line of the ",(0,o.kt)("em",{parentName:"p"},"worker script")," we start the worker.  From now, it starts communication with Temporal: receiving and sending data."),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,'Let\'s recap what was done in this "Hello world" example:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The main script, that instantiates an instance of ",(0,o.kt)("inlineCode",{parentName:"li"},"WorkflowClientInterface"),", creates a workflow and starts it."),(0,o.kt)("li",{parentName:"ol"},"Workflow code."),(0,o.kt)("li",{parentName:"ol"},"Activity code."),(0,o.kt)("li",{parentName:"ol"},"Worker code with ",(0,o.kt)("a",{parentName:"li",href:"https://roadrunner.dev"},"RoadRunner"),", that instantiates the worker, registers workflow types and activity implementations.")),(0,o.kt)("p",null,"These reflect the 4 main APIs of Temporal's PHP SDK."))}d.isMDXComponent=!0},766:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/banner_php-6b22d4e7d2062dc50defc5f46c25c536.png"}}]);